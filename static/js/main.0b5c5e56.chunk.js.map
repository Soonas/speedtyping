{"version":3,"sources":["constants/functions.tsx","constants/samples.tsx","pages/home/components/style/index.tsx","pages/home/components/home.tsx","pages/home/container/homeScreen.tsx","App.js","reportWebVitals.js","index.js"],"names":["emptySpaces","phrase","initialPosition","countedEmptySpaces","undefined","nextWordFirstPosition","position","compareWords","samplePhrase","userTypedPhrase","length","positionAfterSpaces","wordLength","SAMPLE_ONE","Classes","h1","fontFamily","fontSize","h2","containerRow","display","flexDirection","buttonDiv","alignItems","Home","acuracy","wpm","entry","elapsedTime","disableForm","definirEntry","startClock","className","disabled","placeholder","value","onChange","event","target","style","onClick","HomeScreen","useState","setDisableForm","coutingTime","setCoutingTime","rightWords","setRightWords","wrongWords","setWrongWords","setAcuracy","setWpm","setEntry","setElapsedTime","parsedElapsedTime","setParsedElapsedTime","useEffect","calculateResult","defineTimeAcurrency","uncorrectedErrors","timeMin","totalEntries","avaluateEntry","correctEntries","calculateAcuracy","allTypedEntries","calculateGrossWpm","timeCall","moment","utc","format","setInterval","timer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b5c5e56.chunk.js","sourcesContent":["export const emptySpaces = (phrase: string, initialPosition: number) => {\n    let countedEmptySpaces = 0\n    while (phrase[initialPosition + countedEmptySpaces] === ' ' || phrase[initialPosition + countedEmptySpaces] === '\\n') {\n        if (phrase[initialPosition + countedEmptySpaces] === undefined)\n            return 0\n        else\n            countedEmptySpaces++\n    }\n    return countedEmptySpaces\n}\n\nexport const wordLength = (phrase: string, initialPosition: number) => {\n    let position = 0\n    let countedEmptySpaces = emptySpaces(phrase, initialPosition)\n    const positionAfterSpaces = initialPosition + countedEmptySpaces\n    while (phrase[position + positionAfterSpaces] !== ' ' && phrase[position + positionAfterSpaces] !== '\\n'\n        && phrase[position + positionAfterSpaces] !== undefined) {\n        position++\n    }\n    return position\n}\n\nexport const nextWordFirstPosition = (phrase: string, initialPosition: number) => {\n    let position = initialPosition\n    while (phrase[position] !== ' ' && phrase[position] !== '\\n' && phrase[position] !== undefined) {\n        position++\n    }\n    return position + emptySpaces(phrase, position) + 1\n}\n\nexport const compareWords = (samplePhrase: string, userTypedPhrase: string, initialPosition: number) => {\n    let position\n    const length = wordLength(samplePhrase, initialPosition)\n    for (position = initialPosition; position < length; position++)\n        if (samplePhrase[position] !== userTypedPhrase[position])\n            return false\n    return true\n}\n","export const SAMPLE_ONE: string = 'Parafraseando e traduzindo livremente Dan Abramov, um erro JavaScript em uma parte da interface não deveria quebrar todo seu App. Para solucionar este problema, React 16 introduz um novo conceito de um \"error boundary\".'\nexport const SAMPLE_TWO: string = 'Error boundaries são componentes React que interceptam erros de JavaScript em qualquer lugar de sua árvore de componentes, disponibilizando os e oferecendo uma fallback UI, ou seja, uma interface auxiliar para ser exibida quando há um erro em sua árvore de componentes.'","\nexport const Classes = {\n    h1: {\n        fontFamily: 'Roboto',\n        fontSize: '18px'\n    },\n    h2: {\n        fontFamily: 'Roboto',\n        fontSize: '14px'\n    },\n    containerRow: {\n        display: \"flex\",\n        flexDirection: \"row\"\n    },\n    buttonDiv: {\n        alignItems: 'center'\n    },\n}\n\n","import { Classes } from \"./style\"\ninterface HomeProps {\n    phrase: string\n    acuracy: number\n    wpm: number\n    entry: string\n    elapsedTime: string\n    disableForm: boolean\n\n    definirEntry: (entry: string) => void\n    startClock: () => void\n}\n\nexport const Home = ({ phrase, acuracy, wpm, entry, elapsedTime, disableForm, definirEntry, startClock }: HomeProps) => {\n    return <>\n        <div className=\"container mb-5 mb-5\">\n            <div className=\"row\">\n                <div className=\"border rounder p-3 mb-4\">\n                    The typing speed will be measured, you will have to read the text thatwill be presented and type it in the field below, with button \"Start test\".\n                    <div className=\"border rounder p-3 mb-4\">\n                        {phrase}\n                    </div>\n                    <textarea\n                        disabled={disableForm}\n                        className=\"form-control mb-3\"\n                        placeholder=\"Start typing...\"\n                        value={entry}\n                        onChange={(event) => { definirEntry(event.target.value) }}\n                    ></textarea>\n                    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                        < div >\n                            <div>\n                                Time: {elapsedTime}\n                            </div>\n                            <div>\n                                Accuracy: {acuracy} %\n                            </div>\n                            <div>\n                                Speed: {wpm}\n                            </div>\n                        </div>\n\n                    </div>\n                    <div style={Classes.buttonDiv} className=\"text-right\">\n                        <button onClick={startClock} className=\"btn btn-light\" >Start Test</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    </>\n}","import moment from 'moment'\nimport { useEffect, useState } from 'react'\nimport { compareWords, nextWordFirstPosition } from '../../../constants/functions'\nimport { SAMPLE_ONE } from '../../../constants/samples'\nimport { Home } from '../components/home'\n\nexport const HomeScreen = () => {\n\n    const [disableForm, setDisableForm] = useState<boolean>(true)\n    const [coutingTime, setCoutingTime] = useState<boolean>(false)\n    const [rightWords, setRightWords] = useState<number>(0)\n    const [wrongWords, setWrongWords] = useState<number>(0)\n    const [acuracy, setAcuracy] = useState<number>(0)\n    const [wpm, setWpm] = useState<number>(0)\n    const [entry, setEntry] = useState<string>('')\n    const [elapsedTime, setElapsedTime] = useState<number>(0)\n    const [parsedElapsedTime, setParsedElapsedTime] = useState<string>('00:00')\n\n    useEffect(() => {\n        if (entry.length === 0) {\n            setAcuracy(0)\n            setWpm(0)\n        }\n        else\n            calculateResult(SAMPLE_ONE, entry)\n    }, [entry])\n\n    useEffect(() => {\n        defineTimeAcurrency()\n        // eslint-disable-next-line\n    }, [elapsedTime])\n\n    const calculateGrossWpm = (allTypedEntries: number, timeMin: number) => {\n        return (allTypedEntries / 5) / timeMin\n    }\n\n    const calculateNetWpm = (uncorrectedErrors: number, allTypedEntries: number, timeMin: number) => {\n        setWpm(calculateGrossWpm(allTypedEntries, timeMin) - (uncorrectedErrors / timeMin))\n    }\n\n    const calculateAcuracy = (correctEntries: number, totalEntries: number) => {\n        setAcuracy(100 * correctEntries / totalEntries)\n    }\n\n    const avaluateEntry = (samplePhrase: string, userTypedPhrase: string) => {\n        let position = 0\n        while (samplePhrase[position] !== undefined) {\n            if (compareWords(samplePhrase, userTypedPhrase, position)) {\n                setRightWords(rightWords + 1)\n            }\n            else {\n                setWrongWords(wrongWords + 1)\n            }\n            position += nextWordFirstPosition(samplePhrase, position)\n        }\n    }\n\n    const calculateResult = (samplePhrase: string, userTypedPhrase: string) => {\n        const totalEntries = rightWords + wrongWords\n        avaluateEntry(samplePhrase, userTypedPhrase)\n        calculateAcuracy(rightWords, totalEntries)\n        calculateNetWpm(wrongWords, totalEntries, 1)\n    }\n\n    const definirEntry = (entry: string) => {\n        setEntry(entry)\n    }\n\n    const startStopWatch = () => {\n        if (!coutingTime) {\n            setDisableForm(false)\n            setInterval(() => {\n                setElapsedTime((timer) => timer + 1)\n            }, 1000)\n            setCoutingTime(true)\n        }\n    }\n\n    const defineTimeAcurrency = () => {\n        const timeCall = moment.utc(elapsedTime * 1000).format(\"HH:mm:ss\")\n        setParsedElapsedTime(timeCall)\n    }\n\n    return <Home\n        phrase={SAMPLE_ONE}\n        acuracy={acuracy}\n        wpm={wpm}\n        entry={entry}\n        elapsedTime={parsedElapsedTime}\n        disableForm={disableForm}\n\n        definirEntry={definirEntry}\n        startClock={startStopWatch}\n    />\n\n}","import './App.css';\nimport { HomeScreen } from '../src/pages/home/container/homeScreen'\n\nfunction App() {\n  return <HomeScreen />\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}